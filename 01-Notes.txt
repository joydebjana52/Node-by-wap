To develop a Node.js application, we need Node.js to install on our computer. To simplify this process, we can use the nodemon package globally.

For a Node.JS application "package.json" keeps the whole configuration, and to create that file we'll run the command "npm init".
For a Node.js application, "package.json" contains the entire configuration. To create this file, we'll execute 
the command:
"npm init" / "npm init -y"
Later, all JavaScript modules or packages that we'll be used in project, will be added to the "package.json" file.

*) In Server side programming language we start our programming by creating a Server.

*) http://test.com  or https://test.com
=> This follows a "stateless protocol," which means that as a user, I request some data from the server, and then the server responds
and breaks the connection. If this doesn't happen, meaning if the server doesn't break the connection, then there will be problems
like server being busy, etc.

And there is stateful protocol as well, that doesn't break the connection between server and client.
Like:~
1.) ws -> Web Socket.
2.) RTMPS -> Video playing.

In react we import a module/package by using "import" keyword but in Node.JS we use "require" keyword.

*) In Node.JS, to create a server, we need "http" module.http module by default exsit in Node.

*) To access Server's code we need a domain name.Like test.com .

*) In our local PC, we use "nodemon" to recompile our changes in our code. Now, when we deploy our software on the server,
we will use "pm2" to fulfill the same purpose.

*) Status code: status code is used to inform browser if the request's status like Status codes are like signals between
your browser and a website's server, telling you whether your request was successful, failed because of something you did,
or failed because of a problem on the website's end.

Some mostly used satus code and their use case:
    200: OK - Everything went fine.
    404: Not Found - The requested resource could not be found.
    401: Unauthorized - Authentication is required to access the resource.
    403: Forbidden - The client does not have permission to access the resource.
    405: Not allowed - Request method isn't allowed.
    409: Duplicate - Like loggin with same email
    500: Internal Server Error - Something went wrong on the server's end.

*) Monolethic -> Directly serving to UI/UX
**) Microservices-> Only exchaning data.(OTP, Email, sms). -> We'll learn this one.

*) When working with Microservices, we use a template engine to write HTML code. A template engine is nothing but a npm package.
There are so many template engine available like: pug, ejs, mustach.

*) There are some request method, that can be identified by the below code:~
    const requestMethod = req.method;
    console.log(requestMethod);

*) To follow a stateless protocol, we need to end the connection between the client and server after we respond. The code below does just that: 
    response.end("Your response") ;

---------------------------------------------------------------------------------------------------------------------------------------------------

By default, JavaScript is a synchronous language. This means it runs line by line. For instance, if the code at line number 3 takes a lot of time
to execute, then the code at line number 4 will be waiting.
To avoid this problem, there are some function(Promise, setTimeout, setInterval) in JavaScript, and that's called async programming.

    console.log("First line");
    console.log("Second line");
    setTimeout(()=> {
        console.log("Third line")
    }, 3000);
    console.log("Fourth line");


*) There are several request methods such as GET, POST, PUT, DELETE, etc., and each of them has its own way
to send data during the request. Now, let's learn how to send data for a GET request.

a.) For GET request we use query param, that is written with request url, we can differenciate two query by "&" symble, which looks like:
=>  localhost:8000?username=janajoydeb&email=joydebjana@gmail.com
we can get all those data such as username, email from "req" parameter from server, using "req.url" .
But we'll get data that looks like: ?username=janajoydeb&email=joydebjana@gmail.com .
To Handel it we'll use "url" module. require the "url" module and use "parse" method to get data efficiently.

=>  const url = require("url");
    url.parse(req.url, true);

*) Suppose, we've a Promise that returns resolve or reject, now it's result is stored in a variable.To handel that we'll use
then() and catch().
=> to get result of resolve we use then() and to get result of reject we use catch().

**) Server crash -> Complilation stopped  | Database crash -> Data deleted.

*) In Controller/Controller folder we keep functionality files.In main file we keep only routing related codes.

*) In Node.js, to connect with MongoDB, there is an npm package available for that, and we'll install it. In a real-life project, we typically
establish the connection with the database only once. However, since we are learning, for each method, we'll connect with the database.

*) To set response data types: res.setHeaders('Content-Type', 'application/json');
The above code will be converted into JSON format while it'll be recevied by Browser/front-end.

*) package / module / dependency / library they all four is similar.
=> They all can be used by two way.
a.) CommonJS => Using "require()" method.
b.) ES6 => using "import" keyword.

*) To use a module (http) check the below two lines of code:~
a.)  const http = require("http");   -> CommonJS
b.)  import http from "http;         -> ES6

*) In Node we can use MongoDB by two way:~
a.) MongoDB -> Code MongoDB
b.) Mongoose-> MongoDB Framework -> It gives type safety. In Mongoose we can define a schema, and in schema we define which field will contain which type of data.
A schema defines which datafields will be present for a collection, that's why unwanted data-fields can't be added by mistake, that gives security.

For better understanding, schema looks like:

{
    id: number,
    name: string,
    cgpa: number,
    bloodGroup: string
}